[{"C:\\Users\\Hossam\\Desktop\\techsquad\\src\\index.js":"1","C:\\Users\\Hossam\\Desktop\\techsquad\\src\\App.js":"2","C:\\Users\\Hossam\\Desktop\\techsquad\\src\\reportWebVitals.js":"3","C:\\Users\\Hossam\\Desktop\\techsquad\\src\\component\\radar-charts\\radarcharts.component.jsx":"4","C:\\Users\\Hossam\\Desktop\\techsquad\\src\\component\\bar-charts\\barcharts.component.jsx":"5","C:\\Users\\Hossam\\Desktop\\techsquad\\src\\component\\main\\main.jsx":"6","C:\\Users\\Hossam\\Desktop\\techsquad\\src\\component\\main\\data.js":"7","C:\\Users\\Hossam\\Desktop\\techsquad\\src\\component\\main\\styles.jsx":"8","C:\\Users\\Hossam\\Desktop\\techsquad\\src\\component\\player\\player.component.jsx":"9"},{"size":595,"mtime":1608650012091,"results":"10","hashOfConfig":"11"},{"size":424,"mtime":1609008963712,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":2198,"mtime":1609008625298,"results":"14","hashOfConfig":"11"},{"size":3811,"mtime":1609008819020,"results":"15","hashOfConfig":"11"},{"size":3662,"mtime":1609009127029,"results":"16","hashOfConfig":"11"},{"size":2629,"mtime":1609008714855,"results":"17","hashOfConfig":"11"},{"size":140,"mtime":1609008883342,"results":"18","hashOfConfig":"11"},{"size":2496,"mtime":1609008906519,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"57m08v",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},"C:\\Users\\Hossam\\Desktop\\techsquad\\src\\index.js",[],["43","44"],"C:\\Users\\Hossam\\Desktop\\techsquad\\src\\App.js",[],"C:\\Users\\Hossam\\Desktop\\techsquad\\src\\reportWebVitals.js",[],"C:\\Users\\Hossam\\Desktop\\techsquad\\src\\component\\radar-charts\\radarcharts.component.jsx",["45"],"import React from 'react';\r\nimport RadarChart from 'react-svg-radar-chart';\r\nimport 'react-svg-radar-chart/build/css/index.css'\r\nimport { Container, Col, Row } from 'react-bootstrap'\r\nconst RadarCharts = ({ players = [], period = 'avg' }) => {\r\n    const captions = {\r\n        Attacking: \"Attacking\",\r\n        Passing: \"Passing\",\r\n        Technical: \"Technical\",\r\n        Creativity: \"Creativity\",\r\n        Defencive: \"Defencive\"\r\n    }\r\n\r\n    const months = [\"Dec\", \"Jan\", \"Feb\", \"Mar\", \"Apr\"];\r\n\r\n    const data = players.map(player => {\r\n        if (period != 'avg') {\r\n            console.log(\"period\", period);\r\n            player.data = player[period];\r\n        } else {\r\n            player.data = {\r\n                Attacking: 0,\r\n                Passing: 0,\r\n                Technical: 0,\r\n                Creativity: 0,\r\n                Defencive: 0\r\n            }\r\n            months.forEach(month => {\r\n                player.data.Attacking += player[month].Attacking / 5;\r\n                player.data.Passing += player[month].Passing / 5;\r\n                player.data.Technical += player[month].Technical / 5;\r\n                player.data.Creativity += player[month].Creativity / 5;\r\n                player.data.Defencive += player[month].Defencive / 5;\r\n\r\n            })\r\n\r\n        }\r\n\r\n        return player;\r\n    })\r\n    console.log(\"data\", data);\r\n    return (\r\n        <Container>\r\n            <Row className=\"text-center\">\r\n                <Col bsPrefix=\"d-block d-md-none d-lg-none d-xl-none center-item\">\r\n                    <RadarChart\r\n                        captions={captions}\r\n                        data={data}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"text-center\">\r\n                <Col bsPrefix=\"d-none d-md-block d-lg-block  d-xl-block center-item\" >\r\n                    <div>\r\n                        <RadarChart\r\n                            captions={captions}\r\n                            data={data}\r\n                            size={690}\r\n                        />\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\n\r\nexport default RadarCharts;","C:\\Users\\Hossam\\Desktop\\techsquad\\src\\component\\bar-charts\\barcharts.component.jsx",["46","47","48","49"],"import React, { useState } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {\r\n    Chart,\r\n    ArgumentAxis,\r\n    ValueAxis,\r\n    LineSeries,\r\n    Title,\r\n    Legend,\r\n} from '@devexpress/dx-react-chart-material-ui';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Animation } from '@devexpress/dx-react-chart';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nconst format = () => tick => tick;\r\nconst legendStyles = () => ({\r\n    root: {\r\n        display: 'flex',\r\n        margin: 'auto',\r\n        flexDirection: 'row',\r\n    },\r\n});\r\nconst legendLabelStyles = (theme) => ({\r\n    label: {\r\n        paddingTop: theme.spacing(1),\r\n        whiteSpace: 'nowrap',\r\n    },\r\n});\r\nconst legendItemStyles = () => ({\r\n    item: {\r\n        flexDirection: 'column',\r\n    },\r\n});\r\n\r\nconst legendRootBase = ({ classes, ...restProps }) => (\r\n    <Legend.Root {...restProps} className={classes.root} />\r\n);\r\nconst legendLabelBase = ({ classes, ...restProps }) => (\r\n    <Legend.Label className={classes.label} {...restProps} />\r\n);\r\nconst legendItemBase = ({ classes, ...restProps }) => (\r\n    <Legend.Item className={classes.item} {...restProps} />\r\n);\r\nconst Root = withStyles(legendStyles, { name: 'LegendRoot' })(legendRootBase);\r\nconst Label = withStyles(legendLabelStyles, { name: 'LegendLabel' })(legendLabelBase);\r\nconst Item = withStyles(legendItemStyles, { name: 'LegendItem' })(legendItemBase);\r\nconst barstyledStyles = () => ({\r\n    chart: {\r\n        paddingRight: '20px',\r\n    },\r\n    title: {\r\n        whiteSpace: 'pre',\r\n    },\r\n});\r\n\r\nconst ValueLabel = (props) => {\r\n    const { text } = props;\r\n    return (\r\n        <ValueAxis.Label\r\n            {...props}\r\n            text={`${text}`}\r\n        />\r\n    );\r\n};\r\n\r\nconst titleStyles = {\r\n    title: {\r\n        whiteSpace: 'pre',\r\n    },\r\n};\r\nconst TitleText = withStyles(titleStyles)(({ classes, ...props }) => (\r\n    <Title.Text {...props} className={classes.title} />\r\n));\r\n\r\nconst BarCharts = ({ players }) => {\r\n    let months = [\"Dec\", \"Jan\", \"Feb\", \"Mar\", \"Apr\"];\r\n    let data = [];\r\n    months.forEach(month => {\r\n        let monthData = {};\r\n        monthData['month'] = month;\r\n        monthData['player1'] = parseInt(parseFloat(players[0][month].Attacking) * 100);\r\n        if (players[1]) {\r\n            monthData['player2'] = parseInt(parseFloat(players[1][month].Attacking) * 100);\r\n        }\r\n        data.push(monthData);\r\n    })\r\n    console.log(\"data\", data);\r\n    return (\r\n        <Container>\r\n            <Paper className=\"style\">\r\n                <Chart data={data} className={\"chart Attacking\"} >\r\n                    <ArgumentAxis tickFormat={format} />\r\n                    <ValueAxis\r\n                        max={50}\r\n                        min={0}\r\n                        labelComponent={ValueLabel}\r\n                    />\r\n                    <LineSeries\r\n                        name={players && players[0] && players[0].label}\r\n                        valueField=\"player1\"\r\n                        argumentField=\"month\"\r\n                    />\r\n                    {players && players[1] && (\r\n                        <LineSeries\r\n                            name={players && players[1] && players[1].label || ''}\r\n                            valueField=\"player2\"\r\n                            argumentField=\"month\"\r\n                        />\r\n                    )}\r\n\r\n                    <Legend position=\"bottom\" rootComponent={Root} itemComponent={Item} labelComponent={Label} />\r\n                    <h4>\r\n                        Attacking month to month\r\n                    </h4>\r\n                    <Animation />\r\n                </Chart>\r\n            </Paper>\r\n        </Container>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default withStyles(barstyledStyles, { name: 'BarCharts' })(BarCharts);","C:\\Users\\Hossam\\Desktop\\techsquad\\src\\component\\main\\main.jsx",["50","51"],"import React, { useState, Fragment } from 'react';\r\nimport { RapperedSelect } from './styles'\r\nimport Select from 'react-select';\r\nimport { dataOptions, stateOptions } from './data';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport Players from '../player/player.component'\r\nconst Main = () => {\r\n    const customStyles = {\r\n        option: (styles, state) => ({\r\n            ...styles,\r\n            backgroundColor: state.isSelected ? \"red\" : \"black\",\r\n        }),\r\n        control: (base, state) => ({\r\n            ...base,\r\n            background: \"#282c34\",\r\n            color: state.isSelected ? 'white' : 'white',\r\n\r\n        })\r\n    };\r\n\r\n    const SecoundCustomStyles = {\r\n        color: \"white\",\r\n        option: (styles, state) => ({\r\n            ...styles,\r\n            backgroundColor: state.isSelected ? \"silver\" : \"black\",\r\n            color: state.isSelected ? \"gray\" : \"white\",\r\n        }),\r\n        control: (base, state) => ({\r\n            ...base,\r\n            background: state.isSelected ? \"#282C34\" : \"#282C34\",\r\n            color: state.isSelected ? \"white\" : \"white\",\r\n        }),\r\n\r\n    };\r\n\r\n    const [selectedPlayers, setSelectedPlayers] = useState([]);\r\n\r\n    const [selectedPeriod, setSelectedPeriod] = useState('avg');\r\n\r\n    const handleChange = (event) => {\r\n        setSelectedPlayers(event || []);\r\n    }\r\n\r\n    const handleChangePeriod = (event) => {\r\n        setSelectedPeriod(event.value || []);\r\n    }\r\n    const [month, setMonth] = useState([\r\n        { name: 'January' },\r\n        { name: 'February' },\r\n        { name: 'March' },\r\n        { name: 'April' },\r\n        { name: 'December' },\r\n        { name: 'Avarage' }\r\n    ]);\r\n\r\n    return (\r\n        <Fragment>\r\n            <Container>\r\n                <Row>\r\n                    <Col xs={12} s={12} md={6}>\r\n                        <RapperedSelect>\r\n                            <Select\r\n                                isMulti\r\n                                name=\"players\"\r\n                                styles={customStyles}\r\n                                options={dataOptions}\r\n                                onChange={handleChange}\r\n                            />\r\n                        </RapperedSelect>\r\n                    </Col>\r\n\r\n                    <Col xs={12} s={12} md={6}>\r\n                        <RapperedSelect>\r\n                            <Select\r\n                            defaultValue={stateOptions[5]}\r\n                                name=\"months\"\r\n                                styles={SecoundCustomStyles}\r\n                                options={stateOptions}\r\n                                onChange={handleChangePeriod}\r\n                                theme={(theme) => ({\r\n                                    ...theme,\r\n                                    borderRadius: 0,\r\n                                    colors: {\r\n                                        ...theme.colors,\r\n                                        text: 'orangered',\r\n                                        primary25: 'hotpink',\r\n                                        primary: 'white',\r\n                                        neutral70: 'white',\r\n                                        neutral80: 'white',\r\n                                        neutral90: 'white',\r\n                                    },\r\n                                })}\r\n\r\n                            />\r\n                        </RapperedSelect>\r\n                    </Col>\r\n                </Row>\r\n                <Players players={selectedPlayers} period={selectedPeriod} />\r\n            </Container>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Main","C:\\Users\\Hossam\\Desktop\\techsquad\\src\\component\\main\\data.js",[],"C:\\Users\\Hossam\\Desktop\\techsquad\\src\\component\\main\\styles.jsx",[],"C:\\Users\\Hossam\\Desktop\\techsquad\\src\\component\\player\\player.component.jsx",["52","53"],"import React, { Fragment } from 'react';\r\nimport RadarCharts from '../radar-charts/radarcharts.component'\r\nimport BarCharts from '../bar-charts/barcharts.component'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\nimport { Avatar } from \"@chakra-ui/react\"\r\n\r\nconst dotclasses = [\"roundblue\", \"roundgreen\"];\r\n\r\nconst Players = ({ players = [], period = 'avg' }) => {\r\n    if (players.length) {\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    {players.map((player, i) => {\r\n                        return (\r\n                            <Fragment>\r\n                                <Col xs={12} md={4} className=\"styled\" key={`player${i}`}>\r\n                                    <div className=\"User\">\r\n                                        <div className={dotclasses[i]}></div>\r\n                                        <Avatar size=\"xs\" name={player.label} src={player.image} />\r\n                                        <h3 className=\"name\">\r\n                                            {player.label}\r\n                                        </h3>\r\n                                    </div>\r\n                                </Col>\r\n                                {players.length == 2 && i == 0 ? (<Col xs={12} md={4} className=\"styled\"><small>vs</small></Col>) : null}\r\n                            </Fragment>\r\n                        )\r\n                    })}\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} md={12}>\r\n                        <div className=\"pleaseChoosePlayer text-center\">\r\n                            <RadarCharts players={players} period={period} className=\"ss\" />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} md={12}>\r\n                        <div className=\"pleaseChoosePlayer\">\r\n                            <BarCharts players={players} />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col md={12} xs={12} s={12}>\r\n                        <div className=\"pleaseChoosePlayer\">\r\n                            <h1 className=\"font\">  Please Choose Player  </h1>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Players;",{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":17,"column":20,"nodeType":"60","messageId":"61","endLine":17,"endColumn":22},{"ruleId":"62","severity":1,"message":"63","line":1,"column":17,"nodeType":"64","messageId":"65","endLine":1,"endColumn":25},{"ruleId":"62","severity":1,"message":"66","line":71,"column":7,"nodeType":"64","messageId":"65","endLine":71,"endColumn":16},{"ruleId":"67","severity":1,"message":"68","line":105,"column":57,"nodeType":"69","messageId":"70","endLine":105,"endColumn":59},{"ruleId":"67","severity":1,"message":"68","line":105,"column":77,"nodeType":"69","messageId":"70","endLine":105,"endColumn":79},{"ruleId":"62","severity":1,"message":"71","line":47,"column":12,"nodeType":"64","messageId":"65","endLine":47,"endColumn":17},{"ruleId":"62","severity":1,"message":"72","line":47,"column":19,"nodeType":"64","messageId":"65","endLine":47,"endColumn":27},{"ruleId":"58","severity":1,"message":"73","line":26,"column":49,"nodeType":"60","messageId":"61","endLine":26,"endColumn":51},{"ruleId":"58","severity":1,"message":"73","line":26,"column":59,"nodeType":"60","messageId":"61","endLine":26,"endColumn":61},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'TitleText' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'month' is assigned a value but never used.","'setMonth' is assigned a value but never used.","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation"]